# Generated from lib/ruboty/ai_agent/recordable.rb with RBS::Inline

module Ruboty
  module AiAgent
    interface _WithToH
      def to_h: () -> Hash[Database::keynable, untyped]
    end

    # Convertable between Hash and Recordable bidirectionally.
    # @rbs module-self _WithToH
    module Recordable : _WithToH
      def self.included: (untyped base) -> untyped

      @record_types: Hash[Symbol, Class]

      def self.record_types: () -> Hash[Symbol, Class]

      # @rbs hash: Hash[Symbol, untyped]?
      # @rbs return: bool
      def self.convertable?: (Hash[Symbol, untyped]? hash) -> bool

      # @rbs value: untyped
      # @rbs return: untyped
      def self.convert_recursively: (untyped value) -> untyped

      # @rbs record: Recordable
      # @rbs return: Hash[Database::keynable, untyped]
      def self.record_to_hash: (Recordable record) -> Hash[Database::keynable, untyped]

      # @rbs hash: Hash[Symbol, untyped]
      # @rbs return: Recordable
      def self.record_from_hash: (Hash[Symbol, untyped] hash) -> Recordable

      # @rbs module-self Class
      module ClassMethods : Class
        attr_accessor record_type: Symbol

        # @rbs name: Symbol
        def register_record_type: (Symbol name) -> untyped
      end

      # @rbs module-self Recordable::ClassMethods.instance
      module PrependMethods : Recordable::ClassMethods
        def to_h: () -> Hash[Database::keynable, untyped]
      end

      # @rbs %a{pure}
      %a{pure}
      def record_type: () -> Symbol
    end
  end
end
